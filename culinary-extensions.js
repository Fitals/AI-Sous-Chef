// culinary-extensions.js - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å CulinaryChat Pro
// –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö "–∑–∞—Ç—ã—á–µ–∫"

console.log('üîß –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è CulinaryChat Pro...');

// ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –†–ê–°–®–ò–†–ï–ù–ò–ô =====
let favoriteRecipes = [];
let recipeRatings = {};
let userPreferences = {
    dietaryRestrictions: [],
    allergies: [],
    preferredCuisines: [],
    difficulty: 'any'
};
let activeTimers = [];
let timerSound = null;

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –†–ê–°–®–ò–†–ï–ù–ò–ô =====
document.addEventListener('DOMContentLoaded', function() {
    initializeExtensions();
});

// –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É, –µ—Å–ª–∏ DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
if (document.readyState === "complete" || document.readyState === "interactive") {
    setTimeout(initializeExtensions, 100);
}

function initializeExtensions() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if (window.extensionsInitialized) {
        console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        return;
    }

    loadExtensionData();
    initializeFavorites();
    initializeHistory();
    initializeCalculator();
    initializeTimers();
    initializeExtendedProfile();
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏
    overrideStubFunctions();
    
    // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    window.extensionsInitialized = true;
    
    console.log('‚úÖ –í—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
}

// ===== –°–ò–°–¢–ï–ú–ê –ò–ó–ë–†–ê–ù–ù–´–• –†–ï–¶–ï–ü–¢–û–í =====
function initializeFavorites() {
    console.log('üíñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ...');
    displayFavoriteRecipes();

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–µ–∫—Ü–∏–∏
    const favoritesSection = document.getElementById('favorites-section');
    if (favoritesSection) {
        favoritesSection.addEventListener('click', (event) => {
            const viewBtn = event.target.closest('.view-recipe-btn');
            const removeBtn = event.target.closest('.remove-favorite');

            if (viewBtn) {
                const card = viewBtn.closest('.favorite-recipe-card');
                if (card) {
                    viewFullRecipe(viewBtn, card.dataset.id);
                }
            } else if (removeBtn) {
                const card = removeBtn.closest('.favorite-recipe-card');
                if (card) {
                    removeFavorite(removeBtn, card.dataset.id);
                }
            }
        });
    }
}

function toggleFavorite(button, recipeId) {
    const messageElement = button.closest('.message');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞ - –∏—â–µ–º —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤—ã–π div —Å —Ç–µ–∫—Å—Ç–æ–º, –∑–∞—Ç–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageContent = messageElement.querySelector('div:not(.recipe-actions):not(.star-rating)');
    let recipeText = '';
    
    if (messageContent) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π div, –±–µ—Ä–µ–º –µ–≥–æ innerHTML –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        recipeText = messageContent.innerHTML;
    } else {
        // –ò–Ω–∞—á–µ –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –∫–Ω–æ–ø–æ–∫
        const clone = messageElement.cloneNode(true);
        const actionsToRemove = clone.querySelectorAll('.recipe-actions, .star-rating');
        actionsToRemove.forEach(el => el.remove());
        recipeText = clone.innerHTML;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞
    const recipeData = {
        id: recipeId,
        title: extractRecipeTitle(recipeText),
        content: recipeText,
        date: new Date().toLocaleDateString('ru-RU'),
        timestamp: Date.now(),
        rating: recipeRatings[recipeId] || 0
    };

    const existingIndex = favoriteRecipes.findIndex(recipe => recipe.id === recipeId);
    
    if (existingIndex >= 0) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        favoriteRecipes.splice(existingIndex, 1);
        button.classList.remove('active');
        button.innerHTML = '<i class="fas fa-heart"></i> –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
        showNotification('–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', 'warning');
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        favoriteRecipes.unshift(recipeData);
        button.classList.add('active');
        button.innerHTML = '<i class="fas fa-heart"></i> –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
        showNotification('–†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!', 'success');
    }
    
    saveExtensionData();
    displayFavoriteRecipes();
    updateBadges();
}

function extractRecipeTitle(text) {
    const titleMatch = text.match(/üçΩÔ∏è\s?\*\*(.*?)\*\*/);
    if (titleMatch) return titleMatch[1];
    
    const lines = text.split('\n');
    for (let line of lines) {
        if (line.trim() && !line.includes('–û–ø–∏—Å–∞–Ω–∏–µ:') && !line.includes('–í—Ä–µ–º—è:')) {
            return line.trim().substring(0, 50);
        }
    }
    return '–†–µ—Ü–µ–ø—Ç ' + new Date().toLocaleTimeString('ru-RU');
}

function displayFavoriteRecipes() {
    const favoritesSection = document.querySelector('#favorites-section .favorites-section');
    
    if (!favoritesSection) {
        console.error('–°–µ–∫—Ü–∏—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ DOM');
        return;
    }
    
    if (favoriteRecipes.length === 0) {
        favoritesSection.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-heart"></i>
                <h3>–ü–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤</h3>
                <p>–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ä–µ—Ü–µ–ø—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }

    favoritesSection.innerHTML = `
        <div class="favorites-header">
            <div class="favorites-search">
                <input type="text" class="search-input" id="favoritesSearch" placeholder="–ü–æ–∏—Å–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö...">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="favorites-filters">
                <select id="favoritesSort" class="form-control">
                    <option value="date">–ü–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</option>
                    <option value="rating">–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É</option>
                    <option value="title">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                </select>
            </div>
        </div>
        <div class="favorites-grid" id="favoritesGrid">
            ${renderFavoriteRecipes(favoriteRecipes)}
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    const searchInput = document.getElementById('favoritesSearch');
    const sortSelect = document.getElementById('favoritesSort');
    
    if (searchInput) searchInput.addEventListener('input', filterFavorites);
    if (sortSelect) sortSelect.addEventListener('change', sortFavorites);
}

function renderFavoriteRecipes(recipes) {
    return recipes.map(recipe => `
        <div class="favorite-recipe-card" data-id="${recipe.id}">
            <div class="recipe-header">
                <h3 class="recipe-title">${recipe.title}</h3>
                <div class="recipe-actions">
                    <div class="recipe-rating">
                        ${renderStars(recipe.rating, recipe.id)}
                    </div>
                    <button class="remove-favorite">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <div class="recipe-preview">
                ${formatRecipePreview(recipe.content)}
            </div>
            <div class="recipe-footer">
                <span class="recipe-date">${recipe.date}</span>
                <button class="view-recipe-btn">
                    <i class="fas fa-eye"></i> –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

function formatRecipePreview(content) {
    const lines = content.split('\n');
    const preview = lines.slice(0, 4).join('<br>');
    return preview.length > 200 ? preview.substring(0, 200) + '...' : preview;
}

function renderStars(rating, recipeId) {
    return Array.from({length: 5}, (_, i) => 
        `<i class="fas fa-star star ${i < rating ? 'active' : ''}" 
           onclick="rateRecipe('${recipeId}', ${i + 1})"></i>`
    ).join('');
}

function removeFavorite(button, recipeId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?')) {
        favoriteRecipes = favoriteRecipes.filter(recipe => recipe.id !== recipeId);
        saveExtensionData();
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ DOM –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏
        const card = button.closest('.favorite-recipe-card');
        if (card) {
            card.style.transition = 'all 0.3s ease';
            card.style.transform = 'scale(0.9)';
            card.style.opacity = '0';
            setTimeout(() => {
                card.remove();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ —Å–ø–∏—Å–æ–∫
                if (favoriteRecipes.length === 0) {
                    displayFavoriteRecipes();
                }
            }, 300);
        } else {
             displayFavoriteRecipes();
        }

        updateBadges();
        showNotification('–†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', 'success');
    }
}

function viewFullRecipe(button, recipeId) {
    const recipe = favoriteRecipes.find(r => r.id === recipeId);
    const card = button.closest('.favorite-recipe-card');
    
    if (!recipe || !card) {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç!', 'error');
        return;
    }
    
    const previewEl = card.querySelector('.recipe-preview');
    const isExpanded = card.classList.contains('expanded');

    if (isExpanded) {
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        previewEl.innerHTML = formatRecipePreview(recipe.content);
        card.classList.remove('expanded');
        button.innerHTML = `<i class="fas fa-eye"></i> –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å`;
    } else {
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        previewEl.innerHTML = recipe.content;
        card.classList.add('expanded');
        button.innerHTML = `<i class="fas fa-eye-slash"></i> –°–≤–µ—Ä–Ω—É—Ç—å`;
    }
}

function filterFavorites() {
    const query = document.getElementById('favoritesSearch').value.toLowerCase();
    const filtered = favoriteRecipes.filter(recipe => 
        recipe.title.toLowerCase().includes(query) || 
        recipe.content.toLowerCase().includes(query)
    );
    
    document.getElementById('favoritesGrid').innerHTML = renderFavoriteRecipes(filtered);
}

function sortFavorites() {
    const sortBy = document.getElementById('favoritesSort').value;
    const sorted = [...favoriteRecipes];
    
    switch(sortBy) {
        case 'rating':
            sorted.sort((a, b) => (b.rating || 0) - (a.rating || 0));
            break;
        case 'title':
            sorted.sort((a, b) => a.title.localeCompare(b.title));
            break;
        case 'date':
        default:
            sorted.sort((a, b) => b.timestamp - a.timestamp);
    }
    
    document.getElementById('favoritesGrid').innerHTML = renderFavoriteRecipes(sorted);
}

// ===== –°–ò–°–¢–ï–ú–ê –†–ï–ô–¢–ò–ù–ì–û–í =====
function rateRecipe(recipeId, rating) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
    recipeRatings[recipeId] = rating;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    const favoriteIndex = favoriteRecipes.findIndex(recipe => recipe.id === recipeId);
    if (favoriteIndex >= 0) {
        favoriteRecipes[favoriteIndex].rating = rating;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ –≤—Å–µ –∑–≤–µ–∑–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
    document.querySelectorAll(`[onclick*="${recipeId}"]`).forEach(star => {
        const starRating = parseInt(star.getAttribute('onclick').match(/(\d+)\)$/)[1]);
        star.classList.toggle('active', starRating <= rating);
    });
    
    saveExtensionData();
    showNotification(`–†–µ—Ü–µ–ø—Ç –æ—Ü–µ–Ω–µ–Ω –Ω–∞ ${rating} –∑–≤–µ–∑–¥!`, 'success');
}

// ===== –ò–°–¢–û–†–ò–Ø –ß–ê–¢–û–í =====
function initializeHistory() {
    console.log('üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤...');
    displayChatHistory();
}

function displayChatHistory() {
    const historySection = document.querySelector('#history-section .history-section');
    
    if (chatHistory.length === 0) {
        historySection.innerHTML = `
            <div class="empty-state">
                <i class="fas fa-comments"></i>
                <h3>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞</h3>
                <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º, –∏ –≤–∞—à–∏ –±–µ—Å–µ–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }

    historySection.innerHTML = `
        <div class="history-header">
            <div class="history-search">
                <input type="text" class="search-input" id="historySearch" placeholder="–ü–æ–∏—Å–∫ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤...">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="history-actions">
                <button class="action-btn secondary" onclick="exportChatHistory()">
                    <i class="fas fa-download"></i> –≠–∫—Å–ø–æ—Ä—Ç
                </button>
                <button class="action-btn" onclick="clearChatHistory()">
                    <i class="fas fa-trash"></i> –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
                </button>
            </div>
        </div>
        <div class="history-list" id="historyList">
            ${renderChatHistory(chatHistory)}
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
    document.getElementById('historySearch').addEventListener('input', filterHistory);
}

function renderChatHistory(chats) {
    return chats.map(chat => `
        <div class="history-item" data-id="${chat.id}" onclick="viewChat('${chat.id}')">
            <div class="history-item-info">
                <div class="history-item-icon">
                    <i class="fas fa-comment-alt"></i>
                </div>
                <div class="history-item-details">
                    <div class="history-item-title">${chat.title}</div>
                    <div class="history-item-meta">
                        <span><i class="fas fa-calendar-alt"></i> ${chat.date}</span>
                        <span><i class="fas fa-comments"></i> ${chat.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π</span>
                    </div>
                </div>
            </div>
            <div class="history-item-actions">
                <button class="history-item-btn continue" onclick="event.stopPropagation(); resumeChat('${chat.id}');">
                    <i class="fas fa-play"></i> –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                </button>
                <button class="history-item-btn" onclick="event.stopPropagation(); deleteChatFromHistory('${chat.id}');">
                    <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                </button>
            </div>
        </div>
    `).join('');
}

function getChatPreview(messages) {
    const lastUserMessage = messages.filter(msg => msg.type === 'user').pop();
    const lastBotMessage = messages.filter(msg => msg.type === 'bot').pop();
    
    let preview = '';
    if (lastUserMessage) {
        preview += `<div class="preview-user">üë§ ${lastUserMessage.text.substring(0, 100)}${lastUserMessage.text.length > 100 ? '...' : ''}</div>`;
    }
    if (lastBotMessage) {
        preview += `<div class="preview-bot">üë®‚Äçüç≥ ${lastBotMessage.text.substring(0, 100)}${lastBotMessage.text.length > 100 ? '...' : ''}</div>`;
    }
    
    return preview;
}

function viewChat(chatId) {
    const chat = chatHistory.find(c => c.id == chatId);
    if (!chat) return;

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–∞
    const modal = document.createElement('div');
    modal.className = 'chat-modal';
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>${chat.title}</h3>
                <button class="close-modal" onclick="this.closest('.chat-modal').remove()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="chat-messages">
                    ${chat.messages.map(msg => `
                        <div class="message ${msg.type}">
                            ${formatMessage(msg.text)}
                        </div>
                    `).join('')}
                </div>
            </div>
            <div class="modal-footer">
                <button class="action-btn" onclick="resumeChat('${chatId}'); this.closest('.chat-modal').remove();">
                    <i class="fas fa-play"></i> –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

function resumeChat(chatId) {
    const chat = chatHistory.find(c => c.id == chatId);
    if (!chat) return;

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —á–∞—Ç
    switchSection('chat');
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    messagesContainer.innerHTML = '';
    currentMessages = [...chat.messages];
    currentChatId = chatId;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    currentMessages.forEach(msg => {
        if (msg.type === 'user') {
            addUserMessage(msg.text, false);
        } else {
            addBotMessage(msg.text, msg.recipeData, false);
        }
    });
    
    hideSuggestions();
    showNotification('–ß–∞—Ç –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω!', 'success');
}

function deleteChatFromHistory(chatId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?')) {
        chatHistory = chatHistory.filter(c => c.id != chatId);
        saveChatHistory();
        displayChatHistory();
        updateBadges();
        showNotification('–ß–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏', 'success');
    }
}

function filterHistory() {
    const query = document.getElementById('historySearch').value.toLowerCase();
    const filtered = chatHistory.filter(chat => 
        chat.title.toLowerCase().includes(query) ||
        chat.messages.some(msg => msg.text.toLowerCase().includes(query))
    );
    
    document.getElementById('historyList').innerHTML = renderChatHistory(filtered);
}

function clearChatHistory() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        chatHistory = [];
        currentMessages = [];
        currentChatId = null;
        saveChatHistory();
        displayChatHistory();
        updateBadges();
        showNotification('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞', 'success');
    }
}

function exportChatHistory() {
    const dataStr = JSON.stringify(chatHistory, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `culinary-chat-history-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    
    showNotification('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');
}

// ===== –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –ü–û–†–¶–ò–ô =====
function initializeCalculator() {
    console.log('üßÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ü–∏–π...');
    
    const calculatorSection = document.querySelector('#calculator-section .calculator-section');
    calculatorSection.innerHTML = `
        <div class="calculator-card">
            <h2><i class="fas fa-calculator"></i> –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ü–∏–π –∏ –∫–∞–ª–æ—Ä–∏–π</h2>
            <div class="calculator-content">
                <div class="calculator-input">
                    <div class="form-group">
                        <label class="form-label">–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π</label>
                        <input type="number" class="form-control" id="currentPortions" value="4" min="1" max="100">
                    </div>
                    <div class="form-group">
                        <label class="form-label">–ñ–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π</label>
                        <input type="number" class="form-control" id="desiredPortions" value="6" min="1" max="100">
                    </div>
                    <button class="action-btn" onclick="calculatePortions()">
                        <i class="fas fa-magic"></i> –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                    </button>
                </div>
                
                <div class="calculator-results" id="calculatorResults">
                    <div class="empty-state">
                        <i class="fas fa-utensils"></i>
                        <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞</h3>
                        <p>–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –≤ —á–∞—Ç–µ, –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ—Ä—Ü–∏–π"</p>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="calculator-card">
            <h3><i class="fas fa-balance-scale"></i> –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è</h3>
            <div class="converter-content">
                <div class="converter-input">
                    <input type="number" class="form-control" id="convertValue" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ">
                    <select class="form-control" id="fromUnit">
                        <option value="–≥">–≥—Ä–∞–º–º—ã</option>
                        <option value="–∫–≥">–∫–∏–ª–æ–≥—Ä–∞–º–º—ã</option>
                        <option value="–º–ª">–º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã</option>
                        <option value="–ª">–ª–∏—Ç—Ä—ã</option>
                        <option value="—Å—Ç.–ª.">—Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏</option>
                        <option value="—á.–ª.">—á–∞–π–Ω—ã–µ –ª–æ–∂–∫–∏</option>
                        <option value="—Å—Ç–∞–∫–∞–Ω">—Å—Ç–∞–∫–∞–Ω—ã</option>
                    </select>
                    <span>‚Üí</span>
                    <select class="form-control" id="toUnit">
                        <option value="–∫–≥">–∫–∏–ª–æ–≥—Ä–∞–º–º—ã</option>
                        <option value="–≥">–≥—Ä–∞–º–º—ã</option>
                        <option value="–ª">–ª–∏—Ç—Ä—ã</option>
                        <option value="–º–ª">–º–∏–ª–ª–∏–ª–∏—Ç—Ä—ã</option>
                        <option value="—Å—Ç.–ª.">—Å—Ç–æ–ª–æ–≤—ã–µ –ª–æ–∂–∫–∏</option>
                        <option value="—á.–ª.">—á–∞–π–Ω—ã–µ –ª–æ–∂–∫–∏</option>
                        <option value="—Å—Ç–∞–∫–∞–Ω">—Å—Ç–∞–∫–∞–Ω—ã</option>
                    </select>
                    <button class="action-btn secondary" onclick="convertUnits()">
                        <i class="fas fa-exchange-alt"></i> –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                </div>
                <div class="converter-result" id="converterResult"></div>
            </div>
        </div>
    `;
}

let currentRecipeForCalculation = null;

function showPortionCalculator(recipeText) {
    currentRecipeForCalculation = recipeText;
    switchSection('calculator');
    
    const calculatorResults = document.getElementById('calculatorResults');
    calculatorResults.innerHTML = `
        <div class="recipe-for-calculation">
            <h4>–†–µ—Ü–µ–ø—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞:</h4>
            <div class="recipe-preview">
                ${formatMessage(recipeText.substring(0, 300))}...
            </div>
            <button class="action-btn" onclick="calculatePortions()">
                <i class="fas fa-calculator"></i> –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Å–µ–π—á–∞—Å
            </button>
        </div>
    `;
    
    showNotification('–†–µ—Ü–µ–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!', 'success');
}

function calculatePortions() {
    if (!currentRecipeForCalculation) {
        showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –≤ —á–∞—Ç–µ', 'warning');
        return;
    }
    
    const currentPortions = parseInt(document.getElementById('currentPortions').value);
    const desiredPortions = parseInt(document.getElementById('desiredPortions').value);
    
    if (!currentPortions || !desiredPortions) {
        showNotification('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π', 'error');
        return;
    }
    
    const multiplier = desiredPortions / currentPortions;
    const recalculatedRecipe = recalculateIngredients(currentRecipeForCalculation, multiplier);
    
    const resultsDiv = document.getElementById('calculatorResults');
    resultsDiv.innerHTML = `
        <div class="calculation-results">
            <div class="calculation-header">
                <h4>–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç (${desiredPortions} –ø–æ—Ä—Ü–∏–π)</h4>
                <div class="multiplier-info">–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: √ó${multiplier.toFixed(2)}</div>
            </div>
            <div class="recalculated-recipe">
                ${formatMessage(recalculatedRecipe)}
            </div>
            <div class="calculation-actions">
                <button class="action-btn" onclick="copyToChat()">
                    <i class="fas fa-copy"></i> –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ —á–∞—Ç
                </button>
                <button class="action-btn secondary" onclick="saveRecalculatedRecipe()">
                    <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç
                </button>
            </div>
        </div>
    `;
}

function recalculateIngredients(recipeText, multiplier) {
    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ - –∏—â–µ–º —á–∏—Å–ª–∞ –ø–µ—Ä–µ–¥ –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    const units = ['–≥', '–∫–≥', '–º–ª', '–ª', '—Å—Ç.–ª.', '—á.–ª.', '—à—Ç', '—Å—Ç–∞–∫–∞–Ω', '—Å—Ç–∞–∫–∞–Ω–∞', '—Å—Ç–∞–∫–∞–Ω–æ–≤'];
    
    let recalculatedText = recipeText;
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    const regex = /(\d+(?:\.\d+)?)\s*(–≥|–∫–≥|–º–ª|–ª|—Å—Ç\.–ª\.|—á\.–ª\.|—à—Ç|—Å—Ç–∞–∫–∞–Ω[–∞-—è]*)/gi;
    
    recalculatedText = recalculatedText.replace(regex, (match, number, unit) => {
        const originalAmount = parseFloat(number);
        const newAmount = originalAmount * multiplier;
        
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
        const roundedAmount = newAmount < 1 ? 
            Math.round(newAmount * 100) / 100 : 
            Math.round(newAmount * 10) / 10;
        
        return `${roundedAmount} ${unit}`;
    });
    
    return recalculatedText;
}

function convertUnits() {
    const value = parseFloat(document.getElementById('convertValue').value);
    const fromUnit = document.getElementById('fromUnit').value;
    const toUnit = document.getElementById('toUnit').value;
    
    if (!value) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏', 'error');
        return;
    }
    
    const result = performUnitConversion(value, fromUnit, toUnit);
    const resultDiv = document.getElementById('converterResult');
    
    if (result !== null) {
        resultDiv.innerHTML = `
            <div class="conversion-result">
                <strong>${value} ${fromUnit} = ${result} ${toUnit}</strong>
            </div>
        `;
    } else {
        resultDiv.innerHTML = `
            <div class="conversion-error">
                –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ${fromUnit} –≤ ${toUnit}
            </div>
        `;
    }
}

function performUnitConversion(value, from, to) {
    const conversions = {
        '–≥': { '–∫–≥': 0.001, '–≥': 1 },
        '–∫–≥': { '–≥': 1000, '–∫–≥': 1 },
        '–º–ª': { '–ª': 0.001, '–º–ª': 1, '—Å—Ç.–ª.': 0.067, '—á.–ª.': 0.2, '—Å—Ç–∞–∫–∞–Ω': 0.004 },
        '–ª': { '–º–ª': 1000, '–ª': 1, '—Å—Ç.–ª.': 67, '—á.–ª.': 200, '—Å—Ç–∞–∫–∞–Ω': 4 },
        '—Å—Ç.–ª.': { '–º–ª': 15, '–ª': 0.015, '—Å—Ç.–ª.': 1, '—á.–ª.': 0.33 },
        '—á.–ª.': { '–º–ª': 5, '–ª': 0.005, '—Å—Ç.–ª.': 3, '—á.–ª.': 1 },
        '—Å—Ç–∞–∫–∞–Ω': { '–º–ª': 250, '–ª': 0.25, '—Å—Ç–∞–∫–∞–Ω': 1 }
    };
    
    if (conversions[from] && conversions[from][to]) {
        const result = value * conversions[from][to];
        return Math.round(result * 1000) / 1000; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤
    }
    
    return null;
}

function copyToChat() {
    const recipeContent = document.querySelector('.recalculated-recipe').textContent;
    switchSection('chat');
    addBotMessage(recipeContent, null, false);
    showNotification('–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç!', 'success');
}

// ===== –°–ò–°–¢–ï–ú–ê –¢–ê–ô–ú–ï–†–û–í =====
function initializeTimers() {
    console.log('‚è±Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ç–∞–π–º–µ—Ä–æ–≤...');
    displayTimers();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    initializeTimerSound();
}

function initializeTimerSound() {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    
    function createBeep(frequency, duration, volume) {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.value = frequency;
        oscillator.type = 'sine';
        
        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(volume, audioContext.currentTime + 0.01);
        gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + duration);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + duration);
    }
    
    timerSound = () => {
        // –¢—Ä–æ–π–Ω–æ–π —Å–∏–≥–Ω–∞–ª
        createBeep(800, 0.2, 0.3);
        setTimeout(() => createBeep(800, 0.2, 0.3), 300);
        setTimeout(() => createBeep(800, 0.4, 0.3), 600);
    };
}

function displayTimers() {
    const timersSection = document.querySelector('#timers-section .timers-section');
    
    timersSection.innerHTML = `
        <div class="timers-header">
            <h2><i class="fas fa-stopwatch"></i> –ö—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã</h2>
            <button class="action-btn" onclick="showAddTimerForm()">
                <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä
            </button>
        </div>
        
        <div class="add-timer-form" id="addTimerForm" style="display: none;">
            <div class="form-group">
                <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞</label>
                <input type="text" class="form-control" id="timerName" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∞—Ä–∫–∞ —è–∏—Ü">
            </div>
            <div class="timer-duration">
                <div class="form-group">
                    <label class="form-label">–ú–∏–Ω—É—Ç—ã</label>
                    <input type="number" class="form-control" id="timerMinutes" value="5" min="0" max="999">
                </div>
                <div class="form-group">
                    <label class="form-label">–°–µ–∫—É–Ω–¥—ã</label>
                    <input type="number" class="form-control" id="timerSeconds" value="0" min="0" max="59">
                </div>
            </div>
            <div class="form-actions">
                <button class="action-btn" onclick="createTimer()">
                    <i class="fas fa-play"></i> –°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å
                </button>
                <button class="action-btn secondary" onclick="hideAddTimerForm()">
                    <i class="fas fa-times"></i> –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        </div>
        
        <div class="timers-list" id="timersList">
            ${renderTimers()}
        </div>
    `;
}

function renderTimers() {
    if (activeTimers.length === 0) {
        return `
            <div class="empty-state">
                <i class="fas fa-stopwatch"></i>
                <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤–∫–∏</p>
            </div>
        `;
    }
    
    return activeTimers.map(timer => `
        <div class="timer-card ${timer.isRunning ? 'running' : 'paused'}" data-id="${timer.id}">
            <div class="timer-header">
                <h4 class="timer-name">${timer.name}</h4>
                <div class="timer-controls">
                    <button class="timer-btn ${timer.isRunning ? 'pause' : 'play'}" 
                            onclick="toggleTimer('${timer.id}')">
                        <i class="fas fa-${timer.isRunning ? 'pause' : 'play'}"></i>
                    </button>
                    <button class="timer-btn reset" onclick="resetTimer('${timer.id}')">
                        <i class="fas fa-redo"></i>
                    </button>
                    <button class="timer-btn delete" onclick="deleteTimer('${timer.id}')">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <div class="timer-display">
                <div class="time-remaining" id="timer-${timer.id}">
                    ${formatTime(timer.remainingTime)}
                </div>
                <div class="timer-progress">
                    <div class="progress-bar" style="width: ${getTimerProgress(timer)}%"></div>
                </div>
            </div>
            <div class="timer-info">
                <span class="original-duration">–ò—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: ${formatTime(timer.originalDuration)}</span>
                <span class="timer-status">${getTimerStatus(timer)}</span>
            </div>
        </div>
    `).join('');
}

function showAddTimerForm() {
    document.getElementById('addTimerForm').style.display = 'block';
    document.getElementById('timerName').focus();
}

function hideAddTimerForm() {
    document.getElementById('addTimerForm').style.display = 'none';
    document.getElementById('timerName').value = '';
    document.getElementById('timerMinutes').value = '5';
    document.getElementById('timerSeconds').value = '0';
}

function createTimer() {
    const name = document.getElementById('timerName').value.trim();
    const minutes = parseInt(document.getElementById('timerMinutes').value) || 0;
    const seconds = parseInt(document.getElementById('timerSeconds').value) || 0;
    
    if (!name) {
        showNotification('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞', 'error');
        return;
    }
    
    if (minutes === 0 && seconds === 0) {
        showNotification('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞', 'error');
        return;
    }
    
    const totalSeconds = minutes * 60 + seconds;
    const timer = {
        id: Date.now().toString(),
        name: name,
        originalDuration: totalSeconds,
        remainingTime: totalSeconds,
        isRunning: true,
        startTime: Date.now(),
        pausedTime: 0
    };
    
    activeTimers.unshift(timer);
    hideAddTimerForm();
    displayTimers();
    updateBadges();
    
    showNotification(`–¢–∞–π–º–µ—Ä "${name}" –∑–∞–ø—É—â–µ–Ω!`, 'success');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    startTimerUpdate(timer.id);
}

function toggleTimer(timerId) {
    const timer = activeTimers.find(t => t.id === timerId);
    if (!timer) return;
    
    timer.isRunning = !timer.isRunning;
    
    if (timer.isRunning) {
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
        timer.startTime = Date.now() - timer.pausedTime;
        startTimerUpdate(timerId);
        showNotification(`–¢–∞–π–º–µ—Ä "${timer.name}" –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω`, 'success');
    } else {
        // –°—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É
        timer.pausedTime = Date.now() - timer.startTime;
        showNotification(`–¢–∞–π–º–µ—Ä "${timer.name}" –Ω–∞ –ø–∞—É–∑–µ`, 'warning');
    }
    
    displayTimers();
}

function resetTimer(timerId) {
    const timer = activeTimers.find(t => t.id === timerId);
    if (!timer) return;
    
    timer.remainingTime = timer.originalDuration;
    timer.isRunning = false;
    timer.startTime = 0;
    timer.pausedTime = 0;
    
    displayTimers();
    showNotification(`–¢–∞–π–º–µ—Ä "${timer.name}" —Å–±—Ä–æ—à–µ–Ω`, 'success');
}

function deleteTimer(timerId) {
    const timer = activeTimers.find(t => t.id === timerId);
    if (!timer) return;
    
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä "${timer.name}"?`)) {
        activeTimers = activeTimers.filter(t => t.id !== timerId);
        displayTimers();
        updateBadges();
        showNotification('–¢–∞–π–º–µ—Ä —É–¥–∞–ª–µ–Ω', 'success');
    }
}

function startTimerUpdate(timerId) {
    const updateInterval = setInterval(() => {
        const timer = activeTimers.find(t => t.id === timerId);
        
        if (!timer || !timer.isRunning) {
            clearInterval(updateInterval);
            return;
        }
        
        const elapsed = Math.floor((Date.now() - timer.startTime) / 1000);
        timer.remainingTime = Math.max(0, timer.originalDuration - elapsed);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const display = document.getElementById(`timer-${timerId}`);
        if (display) {
            display.textContent = formatTime(timer.remainingTime);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            const progressBar = display.parentElement.querySelector('.progress-bar');
            if (progressBar) {
                progressBar.style.width = getTimerProgress(timer) + '%';
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if (timer.remainingTime <= 0) {
            clearInterval(updateInterval);
            onTimerComplete(timer);
        }
    }, 1000);
}

function onTimerComplete(timer) {
    timer.isRunning = false;
    
    // –ò–≥—Ä–∞–µ–º –∑–≤—É–∫
    if (timerSound) {
        timerSound();
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showTimerCompleteNotification(timer);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    displayTimers();
    
    // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if ('Notification' in window && Notification.permission === 'granted') {
        new Notification(`–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω: ${timer.name}`, {
            body: '–í—Ä–µ–º—è –≤—ã—à–ª–æ!',
            icon: 'üç≥'
        });
    }
}

function showTimerCompleteNotification(timer) {
    const notification = document.createElement('div');
    notification.className = 'timer-complete-notification';
    notification.innerHTML = `
        <div class="timer-complete-content">
            <div class="timer-complete-icon">‚è∞</div>
            <div class="timer-complete-text">
                <h3>–í—Ä–µ–º—è –≤—ã—à–ª–æ!</h3>
                <p>–¢–∞–π–º–µ—Ä "${timer.name}" –∑–∞–≤–µ—Ä—à–µ–Ω</p>
            </div>
            <div class="timer-complete-actions">
                <button class="action-btn" onclick="resetTimer('${timer.id}'); this.closest('.timer-complete-notification').remove();">
                    <i class="fas fa-redo"></i> –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
                </button>
                <button class="action-btn secondary" onclick="this.closest('.timer-complete-notification').remove();">
                    <i class="fas fa-times"></i> –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 10000);
}

function formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

function getTimerProgress(timer) {
    return Math.max(0, Math.min(100, 
        ((timer.originalDuration - timer.remainingTime) / timer.originalDuration) * 100
    ));
}

function getTimerStatus(timer) {
    if (timer.remainingTime <= 0) return '–ó–∞–≤–µ—Ä—à–µ–Ω';
    if (timer.isRunning) return '–ò–¥–µ—Ç';
    return '–ù–∞ –ø–∞—É–∑–µ';
}

// ===== –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–†–û–§–ò–õ–¨ =====
function initializeExtendedProfile() {
    console.log('üë§ –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    const profileSection = document.querySelector('#profile-section .profile-section');
    profileSection.innerHTML = `
        <div class="profile-card">
            <h2><i class="fas fa-user-chef"></i> –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <div class="form-group">
                <label class="form-label">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                <input type="text" class="form-control" id="userName" value="${userProfile.name}" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è">
            </div>
            <div class="form-group">
                <label class="form-label">–£—Ä–æ–≤–µ–Ω—å –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞</label>
                <select class="form-control" id="cookingLevel">
                    <option value="beginner" ${userProfile.level === 'beginner' ? 'selected' : ''}>–ù–æ–≤–∏—á–æ–∫</option>
                    <option value="intermediate" ${userProfile.level === 'intermediate' ? 'selected' : ''}>–õ—é–±–∏—Ç–µ–ª—å</option>
                    <option value="advanced" ${userProfile.level === 'advanced' ? 'selected' : ''}>–û–ø—ã—Ç–Ω—ã–π</option>
                    <option value="expert" ${userProfile.level === 'expert' ? 'selected' : ''}>–≠–∫—Å–ø–µ—Ä—Ç</option>
                </select>
            </div>
        </div>
        
        <div class="profile-card">
            <h3><i class="fas fa-heart"></i> –î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</h3>
            <div class="preferences-grid">
                ${renderDietaryPreferences()}
            </div>
        </div>
        
        <div class="profile-card">
            <h3><i class="fas fa-exclamation-triangle"></i> –ê–ª–ª–µ—Ä–≥–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</h3>
            <div class="allergies-input">
                <input type="text" class="form-control" id="newAllergy" placeholder="–î–æ–±–∞–≤–∏—Ç—å –∞–ª–ª–µ—Ä–≥–µ–Ω...">
                <button class="action-btn secondary" onclick="addAllergy()">
                    <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å
                </button>
            </div>
            <div class="allergies-list" id="allergiesList">
                ${renderAllergies()}
            </div>
        </div>
        
        <div class="profile-card">
            <h3><i class="fas fa-globe"></i> –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –∫—É—Ö–Ω—è–º</h3>
            <div class="cuisines-grid">
                ${renderCuisinePreferences()}
            </div>
        </div>
        
        <div class="profile-actions">
            <button class="action-btn" onclick="saveExtendedProfile()">
                <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>
            <button class="action-btn secondary" onclick="resetProfile()">
                <i class="fas fa-undo"></i> –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º
            </button>
        </div>
    `;
}

function renderDietaryPreferences() {
    const dietaryOptions = [
        { id: 'vegetarian', name: 'ü•ó –í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ', description: '–ë–µ–∑ –º—è—Å–∞ –∏ —Ä—ã–±—ã' },
        { id: 'vegan', name: 'üå± –í–µ–≥–∞–Ω—Å—Ç–≤–æ', description: '–¢–æ–ª—å–∫–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞' },
        { id: 'keto', name: 'ü•© –ö–µ—Ç–æ-–¥–∏–µ—Ç–∞', description: '–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–∞—è –¥–∏–µ—Ç–∞' },
        { id: 'paleo', name: 'ü¶¥ –ü–∞–ª–µ–æ-–¥–∏–µ—Ç–∞', description: '–ö–∞–∫ –ø–∏—Ç–∞–ª–∏—Å—å –ø—Ä–µ–¥–∫–∏' },
        { id: 'gluten-free', name: 'üåæ –ë–µ–∑ –≥–ª—é—Ç–µ–Ω–∞', description: '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≥–ª—é—Ç–µ–Ω–æ—Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤' },
        { id: 'lactose-free', name: 'ü•õ –ë–µ–∑ –ª–∞–∫—Ç–æ–∑—ã', description: '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤' }
    ];
    
    return dietaryOptions.map(option => `
        <div class="preference-item">
            <label class="preference-label">
                <input type="checkbox" 
                       ${userPreferences.dietaryRestrictions.includes(option.id) ? 'checked' : ''}
                       onchange="toggleDietaryPreference('${option.id}')">
                <div class="preference-content">
                    <div class="preference-name">${option.name}</div>
                    <div class="preference-description">${option.description}</div>
                </div>
            </label>
        </div>
    `).join('');
}

function renderAllergies() {
    if (userPreferences.allergies.length === 0) {
        return '<p class="no-allergies">–ê–ª–ª–µ—Ä–≥–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã</p>';
    }
    
    return userPreferences.allergies.map(allergy => `
        <div class="allergy-tag">
            <span>${allergy}</span>
            <button onclick="removeAllergy('${allergy}')">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `).join('');
}

function renderCuisinePreferences() {
    const cuisines = [
        'üá∑üá∫ –†—É—Å—Å–∫–∞—è', 'üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è', 'üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è', 'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è',
        'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∞—è', 'üáÆüá≥ –ò–Ω–¥–∏–π—Å–∫–∞—è', 'üá≤üáΩ –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∞—è', 'üáπüá≠ –¢–∞–π—Å–∫–∞—è',
        'üá¨üá∑ –ì—Ä–µ—á–µ—Å–∫–∞—è', 'üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∞—è', 'üá∞üá∑ –ö–æ—Ä–µ–π—Å–∫–∞—è', 'üáπüá∑ –¢—É—Ä–µ—Ü–∫–∞—è'
    ];
    
    return cuisines.map(cuisine => `
        <div class="cuisine-item">
            <label class="cuisine-label">
                <input type="checkbox" 
                       ${userPreferences.preferredCuisines.includes(cuisine) ? 'checked' : ''}
                       onchange="toggleCuisinePreference('${cuisine}')">
                <span>${cuisine}</span>
            </label>
        </div>
    `).join('');
}

function toggleDietaryPreference(preferenceId) {
    const index = userPreferences.dietaryRestrictions.indexOf(preferenceId);
    if (index >= 0) {
        userPreferences.dietaryRestrictions.splice(index, 1);
    } else {
        userPreferences.dietaryRestrictions.push(preferenceId);
    }
}

function addAllergy() {
    const input = document.getElementById('newAllergy');
    const allergy = input.value.trim();
    
    if (!allergy) return;
    
    if (!userPreferences.allergies.includes(allergy)) {
        userPreferences.allergies.push(allergy);
        input.value = '';
        document.getElementById('allergiesList').innerHTML = renderAllergies();
    }
}

function removeAllergy(allergy) {
    userPreferences.allergies = userPreferences.allergies.filter(a => a !== allergy);
    document.getElementById('allergiesList').innerHTML = renderAllergies();
}

function toggleCuisinePreference(cuisine) {
    const index = userPreferences.preferredCuisines.indexOf(cuisine);
    if (index >= 0) {
        userPreferences.preferredCuisines.splice(index, 1);
    } else {
        userPreferences.preferredCuisines.push(cuisine);
    }
}

function saveExtendedProfile() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    userProfile.name = document.getElementById('userName').value;
    userProfile.level = document.getElementById('cookingLevel').value;
    
    saveExtensionData();
    showNotification('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!', 'success');
}

function resetProfile() {
    if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º?')) {
        userProfile = {
            name: '–ö—É–ª–∏–Ω–∞—Ä',
            level: 'beginner'
        };
        userPreferences = {
            dietaryRestrictions: [],
            allergies: [],
            preferredCuisines: [],
            difficulty: 'any'
        };
        
        saveExtensionData();
        initializeExtendedProfile();
        showNotification('–ü—Ä–æ—Ñ–∏–ª—å —Å–±—Ä–æ—à–µ–Ω –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º', 'success');
    }
}

// ===== –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–ì–õ–£–®–ï–ö =====
function overrideStubFunctions() {
    console.log('üîÑ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏...');
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é toggleFavorite –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    window.toggleFavorite = toggleFavorite;
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é rateRecipe
    window.rateRecipe = rateRecipe;
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –ø–æ—Ä—Ü–∏–π –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö
    window.showPortionCalculator = showPortionCalculator;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã
    document.addEventListener('click', function(e) {
        if (e.target.closest('[onclick*="–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"]')) {
            e.preventDefault();
            e.stopPropagation();
            
            const messageElement = e.target.closest('.message');
            if (messageElement) {
                const recipeText = messageElement.textContent;
                showPortionCalculator(recipeText);
            }
        }
    });
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
    if ('Notification' in window && Notification.permission === 'default') {
        Notification.requestPermission();
    }
}

// ===== –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –†–ê–°–®–ò–†–ï–ù–ò–ô =====
function saveExtensionData() {
    try {
        localStorage.setItem('culinaryChat_favorites', JSON.stringify(favoriteRecipes));
        localStorage.setItem('culinaryChat_ratings', JSON.stringify(recipeRatings));
        localStorage.setItem('culinaryChat_preferences', JSON.stringify(userPreferences));
        localStorage.setItem('culinaryChat_timers', JSON.stringify(activeTimers));
        localStorage.setItem('culinaryChat_userProfile', JSON.stringify(userProfile));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:', error);
    }
}

function loadExtensionData() {
    try {
        const savedFavorites = localStorage.getItem('culinaryChat_favorites');
        if (savedFavorites) {
            favoriteRecipes = JSON.parse(savedFavorites);
        }
        
        const savedRatings = localStorage.getItem('culinaryChat_ratings');
        if (savedRatings) {
            recipeRatings = JSON.parse(savedRatings);
        }
        
        const savedPreferences = localStorage.getItem('culinaryChat_preferences');
        if (savedPreferences) {
            userPreferences = {...userPreferences, ...JSON.parse(savedPreferences)};
        }
        
        const savedTimers = localStorage.getItem('culinaryChat_timers');
        if (savedTimers) {
            activeTimers = JSON.parse(savedTimers);
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (–æ–Ω–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏)
            activeTimers.forEach(timer => {
                timer.isRunning = false;
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:', error);
    }
}

// ===== –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï UPDATEBADGES =====
const originalUpdateBadges = window.updateBadges;
window.updateBadges = function() {
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if (originalUpdateBadges) {
        originalUpdateBadges();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à–∏ —Å—á–µ—Ç—á–∏–∫–∏
    const favoritesCount = document.getElementById('favoritesCount');
    const timersCount = document.getElementById('timersCount');
    
    if (favoritesCount) {
        favoritesCount.textContent = favoriteRecipes.length;
        favoritesCount.style.display = favoriteRecipes.length > 0 ? 'inline-block' : 'none';
    }
    
    if (timersCount) {
        const runningTimers = activeTimers.filter(t => t.isRunning).length;
        timersCount.textContent = runningTimers;
        timersCount.style.display = runningTimers > 0 ? 'inline-block' : 'none';
    }
};

// ===== –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ò–ô =====
setInterval(() => {
    saveExtensionData();
}, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

// ===== –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–†–´–¢–ò–Ø –°–¢–†–ê–ù–ò–¶–´ =====
window.addEventListener('beforeunload', () => {
    saveExtensionData();
});

console.log('üéâ CulinaryChat Pro Extensions –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –í–µ—Ä—Å–∏—è 1.0');

function hideSuggestions() {
    const suggestionsContainer = document.querySelector('.initial-suggestions');
    if (suggestionsContainer) {
        suggestionsContainer.style.animation = 'fadeOut 0.5s ease-out';
        setTimeout(() => {
            suggestionsContainer.style.display = 'none';
        }, 500);
    }
}

function showSuggestions() {
    const suggestionsContainer = document.querySelector('.initial-suggestions');
    if (suggestionsContainer) {
        suggestionsContainer.style.display = 'block';
        suggestionsContainer.style.animation = 'fadeIn 0.5s ease-out';
    }
}
